---
layout: post
title:      "Sinatra application portfolio project"
date:       2019-02-03 19:44:11 +0000
permalink:  sinatra_application_portfolio_project
---


I've always been interested in art: graffiti art, comic books, classical art, animation, pretty much anything artistic.  I decided to create a database app that would record the associations between artists, their works and the patrons (or financiers) of those works.  My ActiveRecord associations took a little while to flesh out, but ultimately they seem pretty sound. 

An artist has many works and has many patrons through an artists_patrons join table.  Conversely, a patron has many works and has many artists through the join table, while a work  belongs to both an artist and a patron. 

The hardest part of this project for me was figuring out how to work with the situation where a user would want to change the works associated with a particulat patron.  I finally came up with a solution where I compared the current objects saved within the patron.works array to the data generated by the edit form (and not yet saved).  

Here is the snippet below: 
```
  if params["artist"].empty? && params["patron_works"]["artist_id"] == nil
      new_work_array = []
      params["patron_works"]["work_ids"].each do |work|
        @work = Work.find_by_id(work)
        new_work_array << @work
      end
      @patron.works = @patron.works.reject{|x| !new_work_array.include?(x)}
    end
```

Man, that part took me forever, but it works.  It gets rid of the work object that the user no longer wants to associate with that patron object.  

Another beneficial aspect of this project for me was getting quicker with learning how CRUD actions are processed so that I could chase down a problem through a binding.pry.  I have been using pry in previous labs and projects, but I now feel a much firmer grasp over where the application stops reading the data based on where I've place the pry. 
